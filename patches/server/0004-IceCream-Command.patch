From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pancakse <pancakseyt@gmail.com>
Date: Sun, 14 Jan 2024 :34:38 -0700
Subject: [PATCH] IceCream Command


diff --git a/src/main/java/org/icecream/icecream/IceCreamCommand.java b/src/main/java/dev/icecream/icecream/IceCreamCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..a210170ec7bdbdaf77ea8cf50b988216a9fb0739
--- /dev/null
+++ b/src/main/java/org/icecream/icecream/IceCreamCommand.java
@@ -0,0 +1,77 @@
+package org.icecream.icecream;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class IceCreamCommand extends Command {
+
+    public IceCreamCommand() {
+        super("icecream");
+        this.description = "IceCream related commands";
+        this.usageMessage = "/icecream [reload | version]";
+        this.setPermission("bukkit.command.icecream");
+    }
+
+    public static void init() {
+        MinecraftServer.getServer().server.getCommandMap().register("icecream", "IceCream", new IceCreamCommand());
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+        net.kyori.adventure.text.TextComponent prefix = net.kyori.adventure.text.Component.text("IceCream Â» ")
+            .color(net.kyori.adventure.text.format.TextColor.color(0x12fff6))
+            .decoration(net.kyori.adventure.text.format.TextDecoration.BOLD, true);
+
+        if (args.length != 1) {
+            sender.sendMessage(net.kyori.adventure.text.Component.text()
+                .append(prefix)
+                .append(net.kyori.adventure.text.Component.text("Usage: " + usageMessage, net.kyori.adventure.text.format.NamedTextColor.WHITE))
+                .build());
+            args = new String[]{"version"};
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            MinecraftServer console = MinecraftServer.getServer();
+            try {
+                IceCreamConfig.load();
+            } catch (IOException e) {
+                sender.sendMessage(net.kyori.adventure.text.Component.text("Failed to reload.", net.kyori.adventure.text.format.NamedTextColor.RED));
+                e.printStackTrace();
+                return true;
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, net.kyori.adventure.text.Component.text()
+                .append(prefix)
+                .append(net.kyori.adventure.text.Component.text("IceCream configuration has been reloaded.", net.kyori.adventure.text.format.NamedTextColor.WHITE))
+                .build());
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command.broadcastCommandMessage(sender, net.kyori.adventure.text.Component.text()
+                .append(prefix)
+                .append(net.kyori.adventure.text.Component.text("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")", net.kyori.adventure.text.format.NamedTextColor.WHITE))
+                .build());
+        }
+
+        return true;
+    }
+}
